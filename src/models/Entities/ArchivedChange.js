//@flow
import EntityBase from './entityBase';

export class ArchivedChange extends EntityBase {
  company: string;
  customerFirstName: string;
  customerLastName: string;
  customerLocation: string;
  customerEmail: string;
  customerDepartment: string;
  customerPhone: string;
  customerAddress: string;
  customerNumber: string;
  customNumber: string;
  number: string;
  type: string;
  priority: string;
  impact: string;
  urgency: string;
  status: string;
  assignee: string;
  group: string;
  ruleGroup: string;
  source: string;
  dateCreated: string;
  dateModified: string;
  dateClosed: string;
  schedualedImplementationDate: string;
  actualImplementationDate: string;
  authorizationDate: string;
  reviewDate: string;
  dueDate: string;
  author: string;
  authorizedBy: string;
  modifiedBy: string;
  closedBy: string;
  reason: string;
  description: string;
  results: string;
  feedbackQuestion: string;
  feedbackResponse: string;
  serviceContract: string;
  category1: string;
  category2: string;
  category3: string;
  category4: string;
  category5: string;
  timeWorked: string;
  othersToNotify: string;
  associatedConfigurationItems: string;
  auditHistory: string;
  workHistory: string;
  customerWorkHistory: string;
  slaHistory: string;
  approvalHistory: string;
  ruleGroupHistory: string;
  correspondenceHistory: string;
  repChatHistory: string;

  static fromApiEntity(apiArchivedChange:ArchivedChangeType): ArchivedChange {
    let archivedChange = new ArchivedChange();
    archivedChange.id = apiArchivedChange.id;
    archivedChange.company = apiArchivedChange.company;
    archivedChange.customerFirstName = apiArchivedChange.customerFirstName;
    archivedChange.customerLastName = apiArchivedChange.customerLastName;
    archivedChange.customerLocation = apiArchivedChange.customerLocation;
    archivedChange.customerEmail = apiArchivedChange.customerEmail;
    archivedChange.customerDepartment = apiArchivedChange.customerDepartment;
    archivedChange.customerPhone = apiArchivedChange.customerPhone;
    archivedChange.customerAddress = apiArchivedChange.customerAddress;
    archivedChange.customerNumber = apiArchivedChange.customerNumber;
    archivedChange.customNumber = apiArchivedChange.customNumber;
    archivedChange.number = apiArchivedChange.number;
    archivedChange.type = apiArchivedChange.type;
    archivedChange.priority = apiArchivedChange.priority;
    archivedChange.impact = apiArchivedChange.impact;
    archivedChange.urgency = apiArchivedChange.urgency;
    archivedChange.status = apiArchivedChange.status;
    archivedChange.assignee = apiArchivedChange.assignee;
    archivedChange.group = apiArchivedChange.group;
    archivedChange.ruleGroup = apiArchivedChange.ruleGroup;
    archivedChange.source = apiArchivedChange.source;
    archivedChange.dateCreated = apiArchivedChange.dateCreated;
    archivedChange.dateModified = apiArchivedChange.dateModified;
    archivedChange.dateClosed = apiArchivedChange.dateClosed;
    archivedChange.schedualedImplementationDate = apiArchivedChange.schedualedImplementationDate;
    archivedChange.actualImplementationDate = apiArchivedChange.actualImplementationDate;
    archivedChange.authorizationDate = apiArchivedChange.authorizationDate;
    archivedChange.reviewDate = apiArchivedChange.reviewDate;
    archivedChange.dueDate = apiArchivedChange.dueDate;
    archivedChange.author = apiArchivedChange.author;
    archivedChange.authorizedBy = apiArchivedChange.authorizedBy;
    archivedChange.modifiedBy = apiArchivedChange.modifiedBy;
    archivedChange.closedBy = apiArchivedChange.closedBy;
    archivedChange.reason = apiArchivedChange.reason;
    archivedChange.description = apiArchivedChange.description;
    archivedChange.results = apiArchivedChange.results;
    archivedChange.feedbackQuestion = apiArchivedChange.feedbackQuestion;
    archivedChange.feedbackResponse = apiArchivedChange.feedbackResponse;
    archivedChange.serviceContract = apiArchivedChange.serviceContract;
    archivedChange.category1 = apiArchivedChange.category1;
    archivedChange.category2 = apiArchivedChange.category2;
    archivedChange.category3 = apiArchivedChange.category3;
    archivedChange.category4 = apiArchivedChange.category4;
    archivedChange.category5 = apiArchivedChange.category5;
    archivedChange.timeWorked = apiArchivedChange.timeWorked;
    archivedChange.othersToNotify = apiArchivedChange.othersToNotify;
    archivedChange.associatedConfigurationItems = apiArchivedChange.associatedConfigurationItems;
    archivedChange.auditHistory = apiArchivedChange.auditHistory;
    archivedChange.workHistory = apiArchivedChange.workHistory;
    archivedChange.customerWorkHistory = apiArchivedChange.customerWorkHistory;
    archivedChange.slaHistory = apiArchivedChange.slaHistory;
    archivedChange.approvalHistory = apiArchivedChange.approvalHistory;
    archivedChange.ruleGroupHistory = apiArchivedChange.ruleGroupHistory;
    archivedChange.correspondenceHistory = apiArchivedChange.correspondenceHistory;
    archivedChange.repChatHistory = apiArchivedChange.repChatHistory;

    return archivedChange;
  }
}

export default ArchivedChange;

export type ArchivedChangeType = {
  id: number,
  company: string;
  customerFirstName: string;
  customerLastName: string;
  customerLocation: string;
  customerEmail: string;
  customerDepartment: string;
  customerPhone: string;
  customerAddress: string;
  customerNumber: string;
  customNumber: string;
  number: string;
  type: string;
  priority: string;
  impact: string;
  urgency: string;
  status: string;
  assignee: string;
  group: string;
  ruleGroup: string;
  source: string;
  dateCreated: string;
  dateModified: string;
  dateClosed: string;
  schedualedImplementationDate: string;
  actualImplementationDate: string;
  authorizationDate: string;
  reviewDate: string;
  dueDate: string;
  author: string;
  authorizedBy: string;
  modifiedBy: string;
  closedBy: string;
  reason: string;
  description: string;
  results: string;
  feedbackQuestion: string;
  feedbackResponse: string;
  serviceContract: string;
  category1: string;
  category2: string;
  category3: string;
  category4: string;
  category5: string;
  timeWorked: string;
  othersToNotify: string;
  associatedConfigurationItems: string;
  auditHistory: string;
  workHistory: string;
  customerWorkHistory: string;
  slaHistory: string;
  approvalHistory: string;
  ruleGroupHistory: string;
  correspondenceHistory: string;
  repChatHistory: string;
}

