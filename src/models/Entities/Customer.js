//@flow
import EntityBase from './entityBase';
import Company from './Company';
import Group from './Group';
import CostCenter from './CostCenter';
import JobFunction from './JobFunction';
import UserAvatarImage from './UserAvatarImage';
import SupportRepresentative from './SupportRepresentative';
import EndUserDesktopDefinition from './EndUserDesktopDefinition';
import SmsInfo from './SmsInfo';
import TwitterInfo from './TwitterInfo';
import EntityFollowProfile from './EntityFollowProfile';
import Correspondence from './Correspondence';
import {CustomerSource} from './Enums';
import {CustomerNotificationTypes} from './Enums';
import {UnsubscribeStatuses} from './Enums';
import {LockoutTypes} from './Enums';

export class Customer extends EntityBase {
  guid: string;
  firstName: string;
  lastName: string;
  emailAddress: string;
  customerID: string;
  location: string;
  department: string;
  phone: string;
  fax: string;
  cellular: string;
  manager: string;
  title: string;
  comments: string;
  pendingDeletion: string;
  address1: string;
  address2: string;
  address3: string;
  city: string;
  addressState: string;
  postalCode: string;
  country: string;
  login: string;
  approvedToAccessEUD: string;
  allowedToViewCompanyIncidents: string;
  allowedToViewDepartmentIncidents: string;
  allowedToViewLocationIncidents: string;
  allowedToViewAssociatedGroupsIncidents: string;
  allowedToViewOthersToNotifyIncidents: string;
  secondaryLogin: string;
  allowedToSubmitPurchase: string;
  allowedToSelectVendor: string;
  allowedToEditRate: string;
  canViewServiceCost: string;
  canSearchIncidentArchive: string;
  timeZoneKey: string;
  canAddOTN: string;
  excludeFromSearch: string;
  followupDate: string;
  twitterUsername: string;
  createdDate: string;
  modifiedDate: string;
  isPowerUser: string;
  followDiscussionPosts: string;
  unsubscribedDate: string;
  passwordResetDate: string;
  lastLoginDate: string;
  source: CustomerSource;
  notificationTypes: CustomerNotificationTypes;
  unsubscribeStatus: UnsubscribeStatuses;
  lockoutType: LockoutTypes;
  company: Company;
  primaryGroup: Group;
  costCenter: CostCenter;
  jobFunction: JobFunction;
  avatarImage: UserAvatarImage;
  author: SupportRepresentative;
  defaultSocialClient: EndUserDesktopDefinition;
  smsInfo: SmsInfo;
  twitterInfo: TwitterInfo;
  salesRepOwner: SupportRepresentative;
  modifiedBy: SupportRepresentative;
  wallPostFollowProfile: EntityFollowProfile;
  discussionFeedFollowProfile: EntityFollowProfile;
  unsubscribedSourceCorrespondence: Correspondence;

  static fromApiEntity(apiCustomer:CustomerType): Customer {
    let customer = new Customer();
    customer.id = apiCustomer.id;
    customer.guid = apiCustomer.guid;
    customer.firstName = apiCustomer.firstName;
    customer.lastName = apiCustomer.lastName;
    customer.emailAddress = apiCustomer.emailAddress;
    customer.customerID = apiCustomer.customerID;
    customer.location = apiCustomer.location;
    customer.department = apiCustomer.department;
    customer.phone = apiCustomer.phone;
    customer.fax = apiCustomer.fax;
    customer.cellular = apiCustomer.cellular;
    customer.manager = apiCustomer.manager;
    customer.title = apiCustomer.title;
    customer.comments = apiCustomer.comments;
    customer.pendingDeletion = apiCustomer.pendingDeletion;
    customer.address1 = apiCustomer.address1;
    customer.address2 = apiCustomer.address2;
    customer.address3 = apiCustomer.address3;
    customer.city = apiCustomer.city;
    customer.addressState = apiCustomer.addressState;
    customer.postalCode = apiCustomer.postalCode;
    customer.country = apiCustomer.country;
    customer.login = apiCustomer.login;
    customer.approvedToAccessEUD = apiCustomer.approvedToAccessEUD;
    customer.allowedToViewCompanyIncidents = apiCustomer.allowedToViewCompanyIncidents;
    customer.allowedToViewDepartmentIncidents = apiCustomer.allowedToViewDepartmentIncidents;
    customer.allowedToViewLocationIncidents = apiCustomer.allowedToViewLocationIncidents;
    customer.allowedToViewAssociatedGroupsIncidents = apiCustomer.allowedToViewAssociatedGroupsIncidents;
    customer.allowedToViewOthersToNotifyIncidents = apiCustomer.allowedToViewOthersToNotifyIncidents;
    customer.secondaryLogin = apiCustomer.secondaryLogin;
    customer.allowedToSubmitPurchase = apiCustomer.allowedToSubmitPurchase;
    customer.allowedToSelectVendor = apiCustomer.allowedToSelectVendor;
    customer.allowedToEditRate = apiCustomer.allowedToEditRate;
    customer.canViewServiceCost = apiCustomer.canViewServiceCost;
    customer.canSearchIncidentArchive = apiCustomer.canSearchIncidentArchive;
    customer.timeZoneKey = apiCustomer.timeZoneKey;
    customer.canAddOTN = apiCustomer.canAddOTN;
    customer.excludeFromSearch = apiCustomer.excludeFromSearch;
    customer.followupDate = apiCustomer.followupDate;
    customer.twitterUsername = apiCustomer.twitterUsername;
    customer.createdDate = apiCustomer.createdDate;
    customer.modifiedDate = apiCustomer.modifiedDate;
    customer.isPowerUser = apiCustomer.isPowerUser;
    customer.followDiscussionPosts = apiCustomer.followDiscussionPosts;
    customer.unsubscribedDate = apiCustomer.unsubscribedDate;
    customer.passwordResetDate = apiCustomer.passwordResetDate;
    customer.lastLoginDate = apiCustomer.lastLoginDate;
    customer.source = CustomerSource.enumOrdinalOf(parseInt(apiCustomer.source, 10));
    customer.notificationTypes = CustomerNotificationTypes.enumOrdinalOf(parseInt(apiCustomer.notificationTypes, 10));
    customer.unsubscribeStatus = UnsubscribeStatuses.enumOrdinalOf(parseInt(apiCustomer.unsubscribeStatus, 10));
    customer.lockoutType = LockoutTypes.enumOrdinalOf(parseInt(apiCustomer.lockoutType, 10));
    if (apiCustomer.company) customer.company = Company.fromApiEntity(apiCustomer.company);
    if (apiCustomer.primaryGroup) customer.primaryGroup = Group.fromApiEntity(apiCustomer.primaryGroup);
    if (apiCustomer.costCenter) customer.costCenter = CostCenter.fromApiEntity(apiCustomer.costCenter);
    if (apiCustomer.jobFunction) customer.jobFunction = JobFunction.fromApiEntity(apiCustomer.jobFunction);
    if (apiCustomer.avatarImage) customer.avatarImage = UserAvatarImage.fromApiEntity(apiCustomer.avatarImage);
    if (apiCustomer.author) customer.author = SupportRepresentative.fromApiEntity(apiCustomer.author);
    if (apiCustomer.defaultSocialClient) customer.defaultSocialClient = EndUserDesktopDefinition.fromApiEntity(apiCustomer.defaultSocialClient);
    if (apiCustomer.smsInfo) customer.smsInfo = SmsInfo.fromApiEntity(apiCustomer.smsInfo);
    if (apiCustomer.twitterInfo) customer.twitterInfo = TwitterInfo.fromApiEntity(apiCustomer.twitterInfo);
    if (apiCustomer.salesRepOwner) customer.salesRepOwner = SupportRepresentative.fromApiEntity(apiCustomer.salesRepOwner);
    if (apiCustomer.modifiedBy) customer.modifiedBy = SupportRepresentative.fromApiEntity(apiCustomer.modifiedBy);
    if (apiCustomer.wallPostFollowProfile) customer.wallPostFollowProfile = EntityFollowProfile.fromApiEntity(apiCustomer.wallPostFollowProfile);
    if (apiCustomer.discussionFeedFollowProfile) customer.discussionFeedFollowProfile = EntityFollowProfile.fromApiEntity(apiCustomer.discussionFeedFollowProfile);
    if (apiCustomer.unsubscribedSourceCorrespondence) customer.unsubscribedSourceCorrespondence = Correspondence.fromApiEntity(apiCustomer.unsubscribedSourceCorrespondence);

    return customer;
  }
}

export default Customer;

export type CustomerType = {
  id: number,
  guid: string;
  firstName: string;
  lastName: string;
  emailAddress: string;
  customerID: string;
  location: string;
  department: string;
  phone: string;
  fax: string;
  cellular: string;
  manager: string;
  title: string;
  comments: string;
  pendingDeletion: string;
  address1: string;
  address2: string;
  address3: string;
  city: string;
  addressState: string;
  postalCode: string;
  country: string;
  login: string;
  approvedToAccessEUD: string;
  allowedToViewCompanyIncidents: string;
  allowedToViewDepartmentIncidents: string;
  allowedToViewLocationIncidents: string;
  allowedToViewAssociatedGroupsIncidents: string;
  allowedToViewOthersToNotifyIncidents: string;
  secondaryLogin: string;
  allowedToSubmitPurchase: string;
  allowedToSelectVendor: string;
  allowedToEditRate: string;
  canViewServiceCost: string;
  canSearchIncidentArchive: string;
  timeZoneKey: string;
  canAddOTN: string;
  excludeFromSearch: string;
  followupDate: string;
  twitterUsername: string;
  createdDate: string;
  modifiedDate: string;
  isPowerUser: string;
  followDiscussionPosts: string;
  unsubscribedDate: string;
  passwordResetDate: string;
  lastLoginDate: string;
  source: CustomerSource;
  notificationTypes: CustomerNotificationTypes;
  unsubscribeStatus: UnsubscribeStatuses;
  lockoutType: LockoutTypes;
  company: Company;
  primaryGroup: Group;
  costCenter: CostCenter;
  jobFunction: JobFunction;
  avatarImage: UserAvatarImage;
  author: SupportRepresentative;
  defaultSocialClient: EndUserDesktopDefinition;
  smsInfo: SmsInfo;
  twitterInfo: TwitterInfo;
  salesRepOwner: SupportRepresentative;
  modifiedBy: SupportRepresentative;
  wallPostFollowProfile: EntityFollowProfile;
  discussionFeedFollowProfile: EntityFollowProfile;
  unsubscribedSourceCorrespondence: Correspondence;
}

